package james.rpn.calculator.app;

import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

import com.google.inject.Guice;
import com.google.inject.Injector;

import james.rpn.calculator.element.operator.api.InsufficientParameterException;
import james.rpn.calculator.element.operator.api.RpnOperator;
import james.rpn.calculator.element.operator.api.RpnOperatorFactory;
import james.rpn.calculator.popup.PopUpPrinter;
import james.rpn.calculator.state.api.RpnState;
import james.rpn.calculator.state.internal.RpnStateModule;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Main {

    public static void main(final String[] args) {
        final Scanner scanner = new Scanner(System.in);
        final PopUpPrinter printer = new PopUpPrinter();
        final Injector injector = Guice.createInjector(new RpnStateModule());

        final RpnState state = injector.getInstance(RpnState.class);
        final RpnOperatorFactory rpnOperatorFactory = injector.getInstance(RpnOperatorFactory.class);

        printer.println("Started RPN Caculator, please type expression below:");

        while (true) {
            try {
                final String inputString = scanner.nextLine();

                stateTransit(state, rpnOperatorFactory, inputString);

                printer.println("stack: " + state.getState().toString());
            } catch (final InsufficientParameterException e) {
                final String errorString = String.format(
                    "operator %s (position: %d): insucient parameters",
                    e.getOperatorName(), 0);

                printer.println(errorString);
                printer.println("stack: " + state.getState().toString());
            } catch (final Exception e) {
                throw new IllegalStateException("Errors ", e);
            }
            /**
            finally {
                scanner.close();
            }
            */
        }

    }

    /**
     * state transition operations with input.
     * @param inputString
     */
    private static void stateTransit(
        final RpnState state, final RpnOperatorFactory rpnOperatorFactory, final String inputString) {

        final List<RpnOperator> operators =
            Arrays.asList(inputString.split(" "))
                .stream()
                .map(rpnOperatorFactory::getRpnOperatorFromString)
                .collect(Collectors.toList());

        state.transit(operators);
    }
}
